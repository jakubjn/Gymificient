@inject AuthenticationStateProvider authServiceProvider;

<MudDrawerContainer Class="mud-height-full">
    <MudDrawer ClipMode="DrawerClipMode.Never" Breakpoint="Breakpoint.Sm" @bind-Open="@collapseNavMenu" Fixed="true" Elevation="1" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true">
        <MudImage Style="height: 52px; width:40px; margin-left: 8px; margin-bottom: 20px" Src="Images/GymLogo.png" />

        <MudNavMenu>
            <MudNavLink Match="NavLinkMatch.All" Href="" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="team" Icon="@Icons.Material.Filled.Badge">Team</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="dashboard" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
</MudDrawerContainer>

@code {
    private string userName;

    private bool collapseNavMenu = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        AuthorisationService authService = (AuthorisationService)authServiceProvider;

        UserSession userSession = await authService.GetUserSessionAsync();

        if (userSession is null)
        {
            userName = "Guest";
            return;
        }

        userName = userSession.UserName;
    }
}
