@page "/dashboard/{machineName}"

@inject NavigationManager navManager
@inject MachineService machineService;
@inject UtilisationService utilisationService;
@inject AuthenticationStateProvider authStateProvider;

@if (machine is null)
{
    <div class="d-flex justify-center align-center">
        <div class="spinner-border align-self-center justify-self-center" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="card-header" style="height: fit-content;">
        <h1 class="text-center" style="justify-self: center;"><strong>@machine.machineName</strong></h1>
    </div>

    <MudGrid Spacing="5" Class="pa-3">

        <MudItem xs="6">
            <MudPaper class="d-flex flex-row justify-content-between pa-4 mud-height-full">
                <div class="d-flex flex-column justify-content-around">
                    <div>
                        <MudDatePicker Label="Last Service" @bind-Date="@machine.lastService"></MudDatePicker>
                    </div>

                    <div>
                        <MudDatePicker Label="Next Service" @bind-Date="@machine.nextService"></MudDatePicker>
                    </div>

                    <div>
                        <MudDatePicker Label="Warranty" @bind-Date="@machine.warranty"></MudDatePicker>
                    </div>
                </div>

                <div class="d-flex flex-column justify-content-around" style="margin-left: 5vmin">
                    <div>
                        <MudNumericField Label="Serial Number" T="double"></MudNumericField>
                    </div>

                    <div>
                        <MudTextField AutoGrow Label="Made/Model" T="string"></MudTextField>
                    </div>

                    <div>
                        <MudNumericField Label="Service Number" T="double"></MudNumericField>
                    </div>
                </div>

                <MudButton @onclick="NewContactDetails" Class="align-self-end m-3" Style="background-color: deepskyblue">Save</MudButton>
            </MudPaper>
        </MudItem>

        <MudItem xs="6">
            <MudPaper Class="d-flex flex-column justify-center align-center pa-4">
                <MudChart Height="100%"
                          ChartOptions="@(new ChartOptions {ChartPalette = new[] {Color, "#9ad1d4"}})"
                          ChartType="MudBlazor.ChartType.Donut"       
                          InputData="@(new double[] { mainAverage, 100-mainAverage })"
                          InputLabels="@(new string[] {"Time Used", "Time Not Used"})">
                </MudChart>
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <div class="justify-start align-start" style="width: 100%">
                <MudButton @onclick="OpenDialogAsync">Chart Options</MudButton>
            </div>

            <MudPaper class="d-flex justify-center align-center pa-4" style="height: 80vmin">

                @if(machineAverageUse is not null)
                {
                    <Chart Class="m-5"
                           BackgroundColor="@Color"
                           TitleDisplay="true"
                           Title="Average Machine Use"
                           LegendVisible="false"
                           Data="@machineAverageUse"
                           Id="bar1"
                           Type="GymSystem.Components.ChartType.bar"
                           Labels="@timeFrames"
                           Min="0"
                           Max="100">
                    </Chart>
                }
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudTable Class="pa-4 bg-main" Items="@problems" Hover="true" Breakpoint="MudBlazor.Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Date</MudTh>
                    <MudTh>Problem</MudTh>
                    <MudTh><MudButton @onclick="OnClick" Style="background-color: deepskyblue">New Problem</MudButton></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Date">@context.Date</MudTd>
                    <MudTd DataLabel="Sign">@context.Problem</MudTd>
                    <MudTd></MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public string? machineName { get; set; }

    [Inject]
    public IDialogService DialogService { get; set; }

    private string[] machineAverageUse;
    private string[] timeFrames;

    private double mainAverage = 0;

    private string Color = "#003249";

    private int stepCount = -60;

    public List<MachineProblem> problems;

    private Machine? machine;

    public List<ChartSeries> series;

    protected override async Task OnParametersSetAsync()
    {
        if (machineName == null) return;

        AuthorisationService authService = (AuthorisationService)authStateProvider;

        UserSession userSession = await authService.GetUserSessionAsync();

        if (userSession == null || userSession.UserName == "Guest")
        {
            navManager.NavigateTo("login", true);
            return;
        }

        machine = await machineService.GetMachineFromName(machineName, userSession.OrgId);

        if (machine is null) return;

        problems = await machineService.GetProblemsAsync(machine.Id);

        await SetUsageData();

        base.OnParametersSet();
    }

    private async Task SetUsageData()
    {
        DateTime startTime = new DateTime(2024, 08, 2, 17, 0, 0);

        machineAverageUse = new string[12];
        timeFrames = new string[12];
        stepCount = -60;

        for (int i = 0; i < 12; i++)
        {
            DateTime t1 = startTime.AddMinutes(stepCount * (12 - i));
            DateTime t2 = startTime.AddMinutes(stepCount * (12 - i - 1));

            double averageUse = await utilisationService.GetAverageUsageOverPeriod(machine.Id, t1, t2);

            machineAverageUse[i] = ((int)(averageUse)).ToString();
            timeFrames[i] = t1.TimeOfDay.ToString();

            mainAverage += averageUse;
        }

        mainAverage = mainAverage / machineAverageUse.Length;
    }

    private void OnClick()
    {
        navManager.NavigateTo("/dashboard/" + machineName + "/problems");
    }

    private void NewContactDetails()
    {
        if (machine is null) return;

        machineService.SetNewContacts(machine);
    }

    private async Task OpenDialogAsync()
    {
        OptionsData optionsData = new OptionsData
            {
                startEndDate = new DateTime?[2],
                startEndTime = new TimeSpan?[2]
            };

        DialogOptions dialogOptions = new() { Position = DialogPosition.TopCenter };

        var parameters = new DialogParameters<MachineOptionEdit> {
            { x => x.options, optionsData }
        };

        var dialog = await DialogService.ShowAsync<MachineOptionEdit>("Change Options", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            OptionsData newOptions = (OptionsData)result.Data;
        }
    }
}
