@page "/dashboard/{machineName}"

@inject NavigationManager navManager
@inject MachineService machineService;

@if(machine is null)
{
    <div class="d-flex justify-center align-center">
        <div class="spinner-border align-self-center justify-self-center" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
} else
{
    <div class="card-header" style="height: fit-content;">
        <h1 class="text-center" style="justify-self: center;"><strong>@machine.machineName</strong></h1>
    </div>

    <div class="d-lg-inline-flex stat-image-display p-lg-5">
        <MudPaper class="d-flex justify-content-between p-5 pa-4 bg-main" Height="100%" Width="50%">
            <div class="stat-child">
                <div>
                    <span>Last Serviced:</span>
                    <InputDate @bind-Value="@machine.lastService"></InputDate>
                </div>

                <div>
                    <span>Next Service:</span>
                    <InputDate @bind-Value="@machine.nextService"></InputDate>
                </div>

                <div>
                    <span>Warranty:</span>
                    <InputDate @bind-Value="@machine.warranty"></InputDate>
                </div>
            </div>

            <MudButton Class="align-self-end m-3" Style="background-color: deepskyblue">Save</MudButton>
        </MudPaper>

        <MudPaper Class="pa-4">
            <div class="stat-child">
                <MudChart ChartType="MudBlazor.ChartType.Donut"
                     InputData="@donut"
                     InputLabels="@(new string[] {"Average Use", "Average Unused"})">
                </MudChart>
            </div>
        </MudPaper>
    </div>

    <MudPaper class="m-5 pa-4 d-flex justify-center align-center bg-main" style="width: 90%; height: 40vw">
        <div style="width: 80%; height:80%">
            <MudChart ChartOptions="@(new MudBlazor.ChartOptions {YAxisTicks=10})" ChartType="MudBlazor.ChartType.Bar" XAxisLabels="@XLabels" ChartSeries="@series" Width="100%" Height="100%"></MudChart>
        </div>
    </MudPaper>

    <MudTable Class="m-5 pa-4 bg-main" Items="@problems" Hover="true" Breakpoint="MudBlazor.Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Problem</MudTh>
            <MudTh><MudButton Style="background-color: deepskyblue">New Problem</MudButton></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Date</MudTd>
            <MudTd DataLabel="Sign">@context.Problem</MudTd>
            <MudTd></MudTd>
        </RowTemplate>
    </MudTable>
}


@code {
    [Parameter]
    public string? machineName { get; set; }

    public List<MachineProblem> problems = new List<MachineProblem>()
    {
        new MachineProblem()
        {
            Date = DateTime.Today,
            Problem = "Someone sat on the machine and broke it"
        },

        new MachineProblem()
        {
            Date = DateTime.Today,
            Problem = "New Member tried to use rowing machine to hit legs"
        }
    };

    private Machine? machine;

    public List<ChartSeries> series;

    public string[] XLabels;

    private double[] donut = new double[2];

    protected override async Task OnParametersSetAsync()
    {
        if (machineName == null) return;

        machine = await machineService.GetMachineFromName(machineName);

        if (machine is null) return;

        series = new List<ChartSeries>()
        {
            new ChartSeries()
            {
                Name = "Use %",
                Data = machine.utilization
            },

            //new ChartSeries()
            //{
               // Name = "Average Total Use %",
               // Data = await machineService.GetAllAverageUsage()
            //}
        };

        XLabels = new string[machine.utilization.Length];

        for(int i = 0; i < machine.utilization.Length; i++)
        {
            XLabels[i] = ((i + 1) * 15).ToString() + "s";
        }

        donut = new double[2] { machineService.GetMachineAverageUse(machine), 100 - machineService.GetMachineAverageUse(machine) };

        base.OnParametersSet();
    }

    private void OnClick()
    {
        navManager.NavigateTo("/dashboard/" + machineName + "/problems");
    }
}
