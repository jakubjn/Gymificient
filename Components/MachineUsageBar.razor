@inject MachineService machineService;
@inject UtilisationService utilisationService;
@inject IJSRuntime jsRuntime;

@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager navManager;

@namespace GymSystem.Components

@using Microsoft.JSInterop;

<MudPaper class="d-flex flex-column justify-center pa-4" style="width: 100%; height: 90vh">
    @if(machines is null || MinMaxTimes is null)
    {
        <div class="spinner-border align-self-center justify-self-center" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    } else
    {
        <div style="width:20%">
            <MudSelect @bind-Value="timeView" T="DateTime" Label="Select Timeframe">
                <MudSelectItem Value="@(DateTime.Now.AddMinutes(-30))">Last Half-Hour</MudSelectItem>
                <MudSelectItem Value="@(DateTime.Now.AddMinutes(-60))">Last Hour</MudSelectItem>
                <MudSelectItem Value="@(DateTime.Now.AddDays(-1))">Last Day</MudSelectItem>
                <MudSelectItem Value="@(DateTime.Now.AddDays(-7))">Last Week</MudSelectItem>
            </MudSelect>
        </div>
   
        <GanttChart
            Name="Sample Gantt Chart"
            Id=@Id
            StartTime="@timeView"
            EndTime="DateTime.Now"
            MainData="@MinMaxTimes">
        </GanttChart>
    }
</MudPaper>

@code {
    public List<Machine>? machines;

    private string Id = "usageBar";

    private Dictionary<Machine, List<KeyValuePair<DateTime, DateTime>>> MinMaxTimes;

    private DateTime timeView = DateTime.Now.AddMinutes(-200);

    private string selected = "None";

    protected override async Task OnInitializedAsync()
    {
        AuthorisationService authService = (AuthorisationService)authStateProvider;

        UserSession userSession = await authService.GetUserSessionAsync();

        if (userSession == null || userSession.UserName == "Guest")
        {
            navManager.NavigateTo("login", true);
            return;
        }

        machines = await machineService.GetMachinesAsync(userSession.OrgId);

        if (machines is null) return;

        MinMaxTimes = new Dictionary<Machine, List<KeyValuePair<DateTime, DateTime>>>();

        foreach(Machine machine in machines)
        {
            MinMaxTimes.Add(machine, await utilisationService.GetMachineUsageTimes(machine.Id));
        }     
    }

    private void ChangeViewTime(DateTime time)
    {
        System.Diagnostics.Debug.WriteLine("Running");

        timeView = time;
        Id = "ChangedBar";
    }
}
